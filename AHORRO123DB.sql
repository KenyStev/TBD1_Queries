/* Firebird 2.5      */
/* -------------------------------------------------------- */
/* Proyecto Ahorro123                                       */
/* Teoria de Base de Datos 1                                */
/* Kevin Javier Estevez - 21411165                          */


CREATE DATABASE '127.0.0.1/gds_db:C:\APPSERV\WWW\PRESTAMOS_TBD1\AHORRO123DB.FDB'   USER 'SYSDBA'
   PAGE_SIZE 4096
   DEFAULT CHARACTER SET ISO8859_1;

/* Definition for the `ID_EMPLEADO_GEN` generator :  */

CREATE GENERATOR ID_EMPLEADO_GEN;

SET GENERATOR ID_EMPLEADO_GEN TO 1;

/* Definition for the `EMPLEADOS_ID_EMPLEADO_AUTOINC` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE EMPLEADOS_ID_EMPLEADO_AUTOINC
RETURNS(
  NEW_VALUE INTEGER)
AS
BEGIN
  NEW_VALUE = GEN_ID(ID_EMPLEADO_GEN, 1);
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Autoincrementable de Empleado'
WHERE RDB$PROCEDURE_NAME = 'EMPLEADOS_ID_EMPLEADO_AUTOINC';

/* Structure for the `USUARIO` table :  */

CREATE TABLE USUARIO (
  ID_USUARIO VARCHAR(50) NOT NULL,
  CLAVE VARCHAR(100),
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE);


ALTER TABLE USUARIO ADD CONSTRAINT USUARIO_PK PRIMARY KEY (ID_USUARIO);

ALTER TABLE USUARIO ADD CONSTRAINT FK_USUARIO FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE USUARIO ADD CONSTRAINT USUARIO_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para controlar la auditoria de la aplicacion'
WHERE (RDB$RELATION_NAME = 'USUARIO') AND (RDB$VIEW_SOURCE IS NULL);

/* Structure for the `EMPLEADOS` table :  */

CREATE TABLE EMPLEADOS (
  ID_EMPLEADO INTEGER NOT NULL,
  FECHA_NAC DATE,
  FECHA_CONTRATO DATE,
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUM_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL,
  ID_USUARIO VARCHAR(50) NOT NULL);


ALTER TABLE EMPLEADOS ADD CONSTRAINT EMPLEADOS_PK PRIMARY KEY (ID_EMPLEADO);

ALTER TABLE EMPLEADOS ADD CONSTRAINT EMPLEADOS_USUARIO_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE EMPLEADOS ADD CONSTRAINT EMPLEADOS_USUARIO_FKV1 FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE EMPLEADOS ADD CONSTRAINT EMPLEADOS_USUARIO_FKV2 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los empleados y toda su informacion'
WHERE (RDB$RELATION_NAME = 'EMPLEADOS') AND (RDB$VIEW_SOURCE IS NULL);

/* Structure for the `CUENTAS` table :  */

CREATE TABLE CUENTAS (
  ID_CUENTA INTEGER NOT NULL,
  FECHA_APER DATE,
  SALDO FLOAT,
  TIPO VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL,
  ID_EMPLEADO INTEGER NOT NULL,
  INVERSION FLOAT,
  INVERSION_MES FLOAT,
  POR_DEDUCCION CHAR(20));


ALTER TABLE CUENTAS ADD CONSTRAINT CUENTAS_PK PRIMARY KEY (ID_CUENTA);

ALTER TABLE CUENTAS ADD CONSTRAINT CUENTAS_EMPLEADOS_FK FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADOS(ID_EMPLEADO);

ALTER TABLE CUENTAS ADD CONSTRAINT CUENTAS_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE CUENTAS ADD CONSTRAINT CUENTAS_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar las cuentas de los empleados'
WHERE (RDB$RELATION_NAME = 'CUENTAS') AND (RDB$VIEW_SOURCE IS NULL);

/* Structure for the `EXTERNOS` table :  */

CREATE TABLE EXTERNOS (
  ID_EXTERNO INTEGER NOT NULL,
  FECHA_NAC DATE,
  PARENTESCO_AVAL VARCHAR(50),
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUN_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_1 VARCHAR(100),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE EXTERNOS ADD CONSTRAINT EXTERNOS_PK PRIMARY KEY (ID_EXTERNO);

ALTER TABLE EXTERNOS ADD CONSTRAINT EXTERNOS_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE EXTERNOS ADD CONSTRAINT EXTERNOS_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar las personas externas a la compañia que saquen prestamos'
WHERE (RDB$RELATION_NAME = 'EXTERNOS') AND (RDB$VIEW_SOURCE IS NULL);

/* Structure for the `PRESTAMOS` table :  */

CREATE TABLE PRESTAMOS (
  ID_PRESTAMO INTEGER NOT NULL,
  PERIODOS SMALLINT,
  MONTO FLOAT,
  FECHA DATE,
  ID_EMPLE_AVAL INTEGER NOT NULL,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL,
  SALDO FLOAT,
  ID_EXTERNO INTEGER,
  TASA FLOAT,
  CUOTA_PER_MES FLOAT);


ALTER TABLE PRESTAMOS ADD CONSTRAINT PRESTAMOS_PK PRIMARY KEY (ID_PRESTAMO);

ALTER TABLE PRESTAMOS ADD CONSTRAINT FK_PRESTAMOS FOREIGN KEY (ID_EXTERNO) REFERENCES EXTERNOS(ID_EXTERNO);

ALTER TABLE PRESTAMOS ADD CONSTRAINT PRESTAMOS_EMPLEADOS_FKV1 FOREIGN KEY (ID_EMPLE_AVAL) REFERENCES EMPLEADOS(ID_EMPLEADO);

ALTER TABLE PRESTAMOS ADD CONSTRAINT PRESTAMOS_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE PRESTAMOS ADD CONSTRAINT PRESTAMOS_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los prestamos sacados por los empleados y externos'
WHERE (RDB$RELATION_NAME = 'PRESTAMOS') AND (RDB$VIEW_SOURCE IS NULL);

/* Structure for the `PAGOS` table :  */

CREATE TABLE PAGOS (
  ID_PAGO INTEGER NOT NULL,
  FECHA DATE,
  MONTO FLOAT,
  ID_PRESTAMO INTEGER NOT NULL,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE PAGOS ADD CONSTRAINT PAGOS_PK PRIMARY KEY (ID_PAGO,ID_PRESTAMO);

ALTER TABLE PAGOS ADD CONSTRAINT PAGOS_PRESTAMOS_FK FOREIGN KEY (ID_PRESTAMO) REFERENCES PRESTAMOS(ID_PRESTAMO);

ALTER TABLE PAGOS ADD CONSTRAINT PAGOS_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE PAGOS ADD CONSTRAINT PAGOS_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los pagos efectuados por las personas que sacaron prestamos'
WHERE (RDB$RELATION_NAME = 'PAGOS') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `FN_GET_GANANCIA_ANUAL` procedure :  
   Devuelve la ganancia del año (los intereses de los todos pagos hechos)*/

SET TERM ^ ;

CREATE PROCEDURE FN_GET_GANANCIA_ANUAL
RETURNS(
  P_GANANCIA FLOAT)
AS
BEGIN
  SELECT
  	SUM(R.TEMP_GANANCIA)
  FROM
    (SELECT
      SUM(PA.MONTO - P.MONTO/P.PERIODOS) AS TEMP_GANANCIA
    FROM
      PRESTAMOS P INNER JOIN PAGOS PA ON P.ID_PRESTAMO = PA.ID_PRESTAMO
    WHERE
      EXTRACT(YEAR FROM PA.FECHA) = EXTRACT(YEAR FROM CURRENT_DATE)
    GROUP BY
    	P.ID_PRESTAMO) R
  INTO
    :P_GANANCIA;
  SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Devuelve la ganancia del año (los intereses de los todos pagos hechos)'
WHERE RDB$PROCEDURE_NAME = 'FN_GET_GANANCIA_ANUAL';

/* Definition for the `FN_GET_INVERSION_TOTAL_GANANCIA` procedure :  
   Devuelve la tabla que muestra el se muetras en el cierre anual en el documento
   (Empleado - Inversion Total - Porcentaje - Ganancia)*/

SET TERM ^ ;

CREATE PROCEDURE FN_GET_INVERSION_TOTAL_GANANCIA
RETURNS(
  ID_EMPLEADO INTEGER,
  ID_CUENTA INTEGER,
  NOMBRE VARCHAR(100),
  INVERSION_TOTAL FLOAT,
  PORCENTAJE FLOAT,
  GANANCIA FLOAT)
AS
DECLARE VARIABLE TOTAL FLOAT;
DECLARE VARIABLE GANANCIA_TOTAL FLOAT;
BEGIN
  SELECT
  	SUM(C.SALDO)
  FROM CUENTAS C
  INTO :TOTAL;
  
  SELECT
  	P_GANANCIA
  FROM
  	FN_GET_GANANCIA_ANUAL
  INTO
  	:GANANCIA_TOTAL;
  
  FOR SELECT
  	E.ID_EMPLEADO,
    C.ID_CUENTA,
  	E.NOMBRE_N1 || ' ' || E.NOMBRE_A1 AS EMPLEADO,
  	C.SALDO
  FROM
  	CUENTAS C INNER JOIN EMPLEADOS E ON C.ID_EMPLEADO = E.ID_EMPLEADO
  WHERE
  	C.TIPO = 'INVERSION'
  INTO
  	:ID_EMPLEADO,
    :ID_CUENTA,
  	:NOMBRE,
  	:INVERSION_TOTAL
  DO BEGIN
  	PORCENTAJE = :INVERSION_TOTAL/:TOTAL;
    GANANCIA = :GANANCIA_TOTAL*:PORCENTAJE;
  	SUSPEND;
  END
  
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Devuelve la tabla que muestra el se muetras en el cierre anual en el documento\r\n(Empleado - Inversion Total - Porcentaje - Ganancia)'
WHERE RDB$PROCEDURE_NAME = 'FN_GET_INVERSION_TOTAL_GANANCIA';

/* Definition for the `FN_CIERRE_ANUAL` procedure :  
   Funcion que saca llama a la funcion que saca la ganancia de los empleados segun 
   su inversion y se lo actualiza a su cuenta de inversion*/

SET TERM ^ ;

CREATE PROCEDURE FN_CIERRE_ANUAL
AS
DECLARE VARIABLE GANANCIA FLOAT;
DECLARE VARIABLE ID_CUENTA INTEGER;
BEGIN  
  
  FOR SELECT 
  	R.GANANCIA,
    R.ID_CUENTA
  FROM FN_GET_INVERSION_TOTAL_GANANCIA R
  INTO :GANANCIA,:ID_CUENTA
  DO BEGIN
  	UPDATE CUENTAS C SET
    	C.SALDO = SALDO + :GANANCIA
    WHERE
    	C.ID_CUENTA = :ID_CUENTA;
  END

  SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Funcion que saca llama a la funcion que saca la ganancia de los empleados segun \r\nsu inversion y se lo actualiza a su cuenta de inversion'
WHERE RDB$PROCEDURE_NAME = 'FN_CIERRE_ANUAL';

/* Structure for the `ABONOS` table :  */

CREATE TABLE ABONOS (
  ID_ABONO INTEGER NOT NULL,
  CODIGO_ABONO VARCHAR(150),
  MONTO FLOAT,
  FECHA DATE,
  DESCRIPCION VARCHAR(200),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL,
  ID_CUENTA INTEGER NOT NULL);


ALTER TABLE ABONOS ADD CONSTRAINT ABONOS_CUENTAS_FK FOREIGN KEY (ID_CUENTA) REFERENCES CUENTAS(ID_CUENTA);

ALTER TABLE ABONOS ADD CONSTRAINT ABONOS_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE ABONOS ADD CONSTRAINT ABONOS_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los abonos a las cuentas'
WHERE (RDB$RELATION_NAME = 'ABONOS') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `FN_CIERRE_MENSUAL` procedure :  
   Acualiza los Saldos de los Prestamos y los Saldos de las Cuentas segun sus pagos
   y abonos de ese mes*/

SET TERM ^ ;

CREATE PROCEDURE FN_CIERRE_MENSUAL
AS
DECLARE VARIABLE TEMP_ID_PRESTAMO INTEGER;
DECLARE VARIABLE TEMP_SUM_PAGOS FLOAT;
DECLARE VARIABLE TEMP_ID_CUENTA INTEGER;
DECLARE VARIABLE TEMP_SUM_ABONOS FLOAT;
BEGIN
  FOR SELECT
  	P.ID_PRESTAMO,
    SUM(PA.MONTO) AS MES_P
  FROM
  	PRESTAMOS P INNER JOIN PAGOS PA ON P.ID_PRESTAMO = PA.ID_PRESTAMO
  WHERE EXTRACT(MONTH FROM PA.FECHA) = EXTRACT(MONTH FROM CURRENT_DATE) 
	  AND EXTRACT(YEAR FROM PA.FECHA) = EXTRACT(YEAR FROM CURRENT_DATE)
  GROUP BY P.ID_PRESTAMO
  INTO :TEMP_ID_PRESTAMO, :TEMP_SUM_PAGOS
  DO BEGIN
  	UPDATE PRESTAMOS PR 
    SET PR.SALDO = PR.SALDO - :TEMP_SUM_PAGOS
    WHERE PR.ID_PRESTAMO = :TEMP_ID_PRESTAMO;
  END
  
  FOR SELECT
  	C.ID_CUENTA,
    SUM(A.MONTO) AS MES_A
  FROM
  	CUENTAS C INNER JOIN ABONOS A ON C.ID_CUENTA = A.ID_CUENTA
  WHERE EXTRACT(MONTH FROM A.FECHA_CREADO) = EXTRACT(MONTH FROM CURRENT_DATE) 
	  AND EXTRACT(YEAR FROM A.FECHA_CREADO) = EXTRACT(YEAR FROM CURRENT_DATE)
  GROUP BY C.ID_CUENTA
  INTO :TEMP_ID_CUENTA, :TEMP_SUM_ABONOS
  DO BEGIN
  	UPDATE CUENTAS C
    SET C.SALDO = :TEMP_SUM_ABONOS
    WHERE c.ID_CUENTA = :TEMP_ID_CUENTA;
  END
  
  SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Acualiza los Saldos de los Prestamos y los Saldos de las Cuentas segun sus pagos\r\ny abonos de ese mes'
WHERE RDB$PROCEDURE_NAME = 'FN_CIERRE_MENSUAL';

/* Definition for the `FN_GET_CUENATS_BY_TIPO` procedure :  
   Devuelve la cantidad de cuentas segun el tipo especificado y el empleado,
   esto es para validar que no pueda tener mas de una cuenta por tipo*/

SET TERM ^ ;

CREATE PROCEDURE FN_GET_CUENATS_BY_TIPO(
  P_ID_EMPLEADO INTEGER,
  P_TIPO_CUENTA VARCHAR(50))
RETURNS(
  NEW_VALUE INTEGER)
AS
BEGIN
  SELECT
  	COUNT (*)
  FROM
  	CUENTAS C INNER JOIN EMPLEADOS E ON E.ID_EMPLEADO = C.ID_EMPLEADO
  WHERE
  	C.TIPO = :P_TIPO_CUENTA
  INTO
	:NEW_VALUE;
  SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Devuelve la cantidad de cuentas segun el tipo especificado y el empleado,\r\nesto es para validar que no pueda tener mas de una cuenta por tipo'
WHERE RDB$PROCEDURE_NAME = 'FN_GET_CUENATS_BY_TIPO';

/* Definition for the `FN_GET_DATA_FOR_VALIDATE_ABONO` procedure :  
   Devuelve la informacion necesaria para hacer las validaciones en Abonos trigger
   before insert and update*/

SET TERM ^ ;

CREATE PROCEDURE FN_GET_DATA_FOR_VALIDATE_ABONO(
  P_ID_CUENTA INTEGER)
RETURNS(
  P_TIPO_CUENTA VARCHAR(50),
  P_INVERSION FLOAT,
  P_INVERSION_MES FLOAT,
  P_POR_DEDUCCION CHAR(20),
  P_ABONOS INTEGER,
  P_SUMA_ABONOS FLOAT)
AS
DECLARE VARIABLE MESES_CANT INTEGER;
BEGIN
  SELECT TIPO, INVERSION, INVERSION_MES ,POR_DEDUCCION 
  FROM CUENTAS 
  WHERE ID_CUENTA = :P_ID_CUENTA 
  INTO :P_TIPO_CUENTA, :P_INVERSION, :P_INVERSION_MES, :P_POR_DEDUCCION;
  
  IF(:P_POR_DEDUCCION = 'SI') THEN
  	MESES_CANT = 6;
  ELSE IF(:P_POR_DEDUCCION = 'NO') THEN
  	MESES_CANT = 4;
  
  SELECT COUNT(*) AS ABONOS_PD, SUM(A.MONTO) AS ABONOS_SUM
  FROM CUENTAS C INNER JOIN ABONOS A ON C.ID_CUENTA = A.ID_CUENTA
  WHERE C.ID_CUENTA = :P_ID_CUENTA 
      AND EXTRACT(MONTH FROM A.FECHA) < :MESES_CANT
      AND EXTRACT(YEAR FROM A.FECHA) = EXTRACT(MONTH FROM CURRENT_DATE)
  INTO
      :P_ABONOS, :P_SUMA_ABONOS;
  
  SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Devuelve la informacion necesaria para hacer las validaciones en Abonos trigger\r\nbefore insert and update'
WHERE RDB$PROCEDURE_NAME = 'FN_GET_DATA_FOR_VALIDATE_ABONO';

/* Definition for the `FN_GET_MAX_MONTO_FOR_PRESTAMO` procedure :  
   Devuelve el monto maximo que puede sacar un empleado o persona externa de 
    prestamo y la tasa correspondiente.

    Prestatario       Monto Máximo    Tasa Interés (Anual)  Tasa Interés (Mensual) 
    Empleado Afiliado     Inversión + 10,000  24%           2% 
    Empleado No Afiliado  L. 10,000       36%           3% 
    Persona Externa     L. 10,000       48%           4% */

SET TERM ^ ;

CREATE PROCEDURE FN_GET_MAX_MONTO_FOR_PRESTAMO(
  P_ID_EMPLEADO INTEGER,
  P_EMPL_EXTER VARCHAR(3))
RETURNS(
  P_MAX_MONTO FLOAT,
  P_TASA FLOAT)
AS
DECLARE VARIABLE INVERSION FLOAT;
DECLARE VARIABLE AFILIADO INTEGER;
BEGIN
  INVERSION = 0;	

  IF(:P_EMPL_EXTER = 'EMP') THEN	
    SELECT COUNT (*)
    FROM CUENTAS C INNER JOIN EMPLEADOS E ON E.ID_EMPLEADO = C.ID_EMPLEADO
    WHERE E.ID_EMPLEADO = :P_ID_EMPLEADO
    INTO :AFILIADO;
    
    P_TASA = 0.03;
    
    IF(AFILIADO > 0) THEN
      SELECT SUM(C.SALDO)
      FROM CUENTAS C INNER JOIN EMPLEADOS E ON E.ID_EMPLEADO = C.ID_EMPLEADO
      WHERE E.ID_EMPLEADO = :P_ID_EMPLEADO
      INTO :INVERSION;
      
      P_TASA = 0.02;
    
  IF(:P_EMPL_EXTER = 'EXT') THEN
  	P_TASA = 0.04;
    
  P_MAX_MONTO = 10000 + :INVERSION;

  SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Devuelve el monto maximo que puede sacar un empleado o persona externa de \r\nprestamo y la tasa correspondiente.\r\n\r\nPrestatario 			Monto Máximo 		Tasa Interés (Anual) 	Tasa Interés (Mensual) \r\nEmpleado Afiliado 		Inversión + 10,000 	24% 					2% \r\nEmpleado No Afiliado 	L. 10,000 			36% 					3% \r\nPersona Externa 		L. 10,000 			48% 					4% '
WHERE RDB$PROCEDURE_NAME = 'FN_GET_MAX_MONTO_FOR_PRESTAMO';

/* Definition for the `FN_GET_NEXT_FOR` procedure :  
   Devuelve el siguiente numero coorelativo ya sea para pago o para abono,
   segun se indique en el parametro*/

SET TERM ^ ;

CREATE PROCEDURE FN_GET_NEXT_FOR(
  P_ID_CUENTA_PRESTAMO INTEGER,
  P_CUENTA_PRESTAMO CHAR(1))
RETURNS(
  P_NEXT INTEGER)
AS
BEGIN
	IF(P_CUENTA_PRESTAMO = 'C') THEN
      SELECT
        MAX(A.ID_ABONO) + 1
      FROM
        CUENTAS C INNER JOIN ABONOS A ON A.ID_CUENTA = C.ID_CUENTA
      WHERE
        C.ID_CUENTA = :P_ID_CUENTA_PRESTAMO
      INTO
        :P_NEXT;
    ELSE IF(P_CUENTA_PRESTAMO = 'P') THEN
      SELECT
        MAX(PA.ID_PAGO) + 1
      FROM
        PRESTAMOS P INNER JOIN PAGOS PA ON P.ID_PRESTAMO = PA.ID_PRESTAMO
      WHERE
        P.ID_PRESTAMO = :P_ID_CUENTA_PRESTAMO
      INTO
        :P_NEXT;
	SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Devuelve el siguiente numero coorelativo ya sea para pago o para abono,\r\nsegun se indique en el parametro'
WHERE RDB$PROCEDURE_NAME = 'FN_GET_NEXT_FOR';

/* Definition for the `FN_GET_PRESTAMOS_ACTIVOS` procedure :  
   Devuelve la cantidad de prestamos activos para empleado o externo segun sea
   especificado en el parametro*/

SET TERM ^ ;

CREATE PROCEDURE FN_GET_PRESTAMOS_ACTIVOS(
  P_ID_EMPLE_EXTER INTEGER,
  EMPLE_EXTER CHAR(3))
RETURNS(
  P_ACTIVOS INTEGER)
AS
BEGIN
  IF(:EMPLE_EXTER = 'EMP') THEN BEGIN
    SELECT COUNT(*)
    FROM PRESTAMOS P INNER JOIN EMPLEADOS E ON E.ID_EMPLEADO = P.ID_EMPLE_AVAL
    WHERE E.ID_EMPLEADO = :P_ID_EMPLE_EXTER AND P.SALDO > 0
    INTO :P_ACTIVOS;
  END
  ELSE IF(:EMPLE_EXTER = 'EXT') THEN BEGIN
    SELECT COUNT(*)
    FROM PRESTAMOS P INNER JOIN EXTERNOS E ON E.ID_EXTERNO = P.ID_EXTERNO
    WHERE E.ID_EXTERNO = :P_ID_EMPLE_EXTER AND P.SALDO > 0
    INTO :P_ACTIVOS;
  END
  
  SUSPEND;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Devuelve la cantidad de prestamos activos para empleado o externo segun sea\r\nespecificado en el parametro'
WHERE RDB$PROCEDURE_NAME = 'FN_GET_PRESTAMOS_ACTIVOS';

/* Definition for the `SP_ABONOS_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ABONOS_CREATE(
  ID_ABONO INTEGER,
  CODIGO_ABONO VARCHAR(150),
  MONTO FLOAT,
  FECHA DATE,
  DESCRIPCION VARCHAR(200),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_CUENTA INTEGER)
AS
BEGIN
  INSERT INTO ABONOS (
    ID_ABONO,
    CODIGO_ABONO,
    MONTO,
    FECHA,
    DESCRIPCION,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI,
    ID_CUENTA)
  VALUES (
    :ID_ABONO,
    :CODIGO_ABONO,
    :MONTO,
    :FECHA,
    :DESCRIPCION,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI,
    :ID_CUENTA);
END^

SET TERM ; ^

/* Definition for the `SP_ABONOS_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ABONOS_DELETE(
  ID_ABONO INTEGER)
AS
BEGIN
  DELETE FROM ABONOS
  WHERE
    (ID_ABONO = :ID_ABONO);
END^

SET TERM ; ^

/* Definition for the `SP_ABONOS_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ABONOS_READ
RETURNS(
  ID_ABONO INTEGER,
  CODIGO_ABONO VARCHAR(150),
  MONTO FLOAT,
  FECHA DATE,
  DESCRIPCION VARCHAR(200),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_CUENTA INTEGER)
AS
BEGIN
  FOR
    SELECT
      ID_ABONO,
      CODIGO_ABONO,
      MONTO,
      FECHA,
      DESCRIPCION,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI,
      ID_CUENTA
    FROM ABONOS
    INTO
      :ID_ABONO,
      :CODIGO_ABONO,
      :MONTO,
      :FECHA,
      :DESCRIPCION,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI,
      :ID_CUENTA
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_ABONOS_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ABONOS_UPDATE(
  ID_ABONO INTEGER,
  CODIGO_ABONO VARCHAR(150),
  MONTO FLOAT,
  FECHA DATE,
  DESCRIPCION VARCHAR(200),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_CUENTA INTEGER)
AS
BEGIN
  UPDATE ABONOS
  SET
    CODIGO_ABONO = :CODIGO_ABONO,
    MONTO = :MONTO,
    FECHA = :FECHA,
    DESCRIPCION = :DESCRIPCION,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI,
    ID_CUENTA = :ID_CUENTA
  WHERE
    (ID_ABONO = :ID_ABONO);
END^

SET TERM ; ^

/* Definition for the `SP_CUENTAS_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_CUENTAS_CREATE(
  ID_CUENTA INTEGER,
  FECHA_APER DATE,
  SALDO FLOAT,
  TIPO VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_EMPLEADO INTEGER,
  INVERSION FLOAT,
  INVERSION_MES FLOAT,
  POR_DEDUCCION CHAR(20))
AS
BEGIN
  INSERT INTO CUENTAS (
    ID_CUENTA,
    FECHA_APER,
    SALDO,
    TIPO,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI,
    ID_EMPLEADO,
    INVERSION,
    INVERSION_MES,
    POR_DEDUCCION)
  VALUES (
    :ID_CUENTA,
    :FECHA_APER,
    :SALDO,
    :TIPO,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI,
    :ID_EMPLEADO,
    :INVERSION,
    :INVERSION_MES,
    :POR_DEDUCCION);
END^

SET TERM ; ^

/* Definition for the `SP_CUENTAS_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_CUENTAS_DELETE(
  ID_CUENTA INTEGER)
AS
BEGIN
  DELETE FROM CUENTAS
  WHERE
    (ID_CUENTA = :ID_CUENTA);
END^

SET TERM ; ^

/* Definition for the `SP_CUENTAS_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_CUENTAS_READ
RETURNS(
  ID_CUENTA INTEGER,
  FECHA_APER DATE,
  SALDO FLOAT,
  TIPO VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_EMPLEADO INTEGER,
  INVERSION FLOAT,
  INVERSION_MES FLOAT,
  POR_DEDUCCION CHAR(20))
AS
BEGIN
  FOR
    SELECT
      ID_CUENTA,
      FECHA_APER,
      SALDO,
      TIPO,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI,
      ID_EMPLEADO,
      INVERSION,
      INVERSION_MES,
      POR_DEDUCCION
    FROM CUENTAS
    INTO
      :ID_CUENTA,
      :FECHA_APER,
      :SALDO,
      :TIPO,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI,
      :ID_EMPLEADO,
      :INVERSION,
      :INVERSION_MES,
      :POR_DEDUCCION
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_CUENTAS_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_CUENTAS_UPDATE(
  ID_CUENTA INTEGER,
  FECHA_APER DATE,
  SALDO FLOAT,
  TIPO VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_EMPLEADO INTEGER,
  INVERSION FLOAT,
  INVERSION_MES FLOAT,
  POR_DEDUCCION CHAR(20))
AS
BEGIN
  UPDATE CUENTAS
  SET
    FECHA_APER = :FECHA_APER,
    SALDO = :SALDO,
    TIPO = :TIPO,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI,
    ID_EMPLEADO = :ID_EMPLEADO,
    INVERSION = :INVERSION,
    INVERSION_MES = :INVERSION_MES,
    POR_DEDUCCION = :POR_DEDUCCION
  WHERE
    (ID_CUENTA = :ID_CUENTA);
END^

SET TERM ; ^

/* Definition for the `SP_EMPLEADOS_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EMPLEADOS_CREATE(
  ID_EMPLEADO INTEGER,
  FECHA_NAC DATE,
  FECHA_CONTRATO DATE,
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUM_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_USUARIO VARCHAR(50))
AS
BEGIN
  INSERT INTO EMPLEADOS (
    ID_EMPLEADO,
    FECHA_NAC,
    FECHA_CONTRATO,
    NOMBRE_N1,
    NOMBRE_N2,
    NOMBRE_A1,
    NOMBRE_A2,
    DIREC_REFER,
    DIREC_CALLE,
    DIREC_AVE,
    DIREC_NUM_CASA,
    DIREC_CIUDAD,
    DIREC_DEPTO,
    CORREO_2,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI,
    ID_USUARIO)
  VALUES (
    :ID_EMPLEADO,
    :FECHA_NAC,
    :FECHA_CONTRATO,
    :NOMBRE_N1,
    :NOMBRE_N2,
    :NOMBRE_A1,
    :NOMBRE_A2,
    :DIREC_REFER,
    :DIREC_CALLE,
    :DIREC_AVE,
    :DIREC_NUM_CASA,
    :DIREC_CIUDAD,
    :DIREC_DEPTO,
    :CORREO_2,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI,
    :ID_USUARIO);
END^

SET TERM ; ^

/* Definition for the `SP_EMPLEADOS_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EMPLEADOS_DELETE(
  ID_EMPLEADO INTEGER)
AS
BEGIN
  DELETE FROM EMPLEADOS
  WHERE
    (ID_EMPLEADO = :ID_EMPLEADO);
END^

SET TERM ; ^

/* Definition for the `SP_EMPLEADOS_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EMPLEADOS_READ
RETURNS(
  ID_EMPLEADO INTEGER,
  FECHA_NAC DATE,
  FECHA_CONTRATO DATE,
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUM_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_USUARIO VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      ID_EMPLEADO,
      FECHA_NAC,
      FECHA_CONTRATO,
      NOMBRE_N1,
      NOMBRE_N2,
      NOMBRE_A1,
      NOMBRE_A2,
      DIREC_REFER,
      DIREC_CALLE,
      DIREC_AVE,
      DIREC_NUM_CASA,
      DIREC_CIUDAD,
      DIREC_DEPTO,
      CORREO_2,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI,
      ID_USUARIO
    FROM EMPLEADOS
    INTO
      :ID_EMPLEADO,
      :FECHA_NAC,
      :FECHA_CONTRATO,
      :NOMBRE_N1,
      :NOMBRE_N2,
      :NOMBRE_A1,
      :NOMBRE_A2,
      :DIREC_REFER,
      :DIREC_CALLE,
      :DIREC_AVE,
      :DIREC_NUM_CASA,
      :DIREC_CIUDAD,
      :DIREC_DEPTO,
      :CORREO_2,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI,
      :ID_USUARIO
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_EMPLEADOS_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EMPLEADOS_UPDATE(
  ID_EMPLEADO INTEGER,
  FECHA_NAC DATE,
  FECHA_CONTRATO DATE,
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUM_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  ID_USUARIO VARCHAR(50))
AS
BEGIN
  UPDATE EMPLEADOS
  SET
    FECHA_NAC = :FECHA_NAC,
    FECHA_CONTRATO = :FECHA_CONTRATO,
    NOMBRE_N1 = :NOMBRE_N1,
    NOMBRE_N2 = :NOMBRE_N2,
    NOMBRE_A1 = :NOMBRE_A1,
    NOMBRE_A2 = :NOMBRE_A2,
    DIREC_REFER = :DIREC_REFER,
    DIREC_CALLE = :DIREC_CALLE,
    DIREC_AVE = :DIREC_AVE,
    DIREC_NUM_CASA = :DIREC_NUM_CASA,
    DIREC_CIUDAD = :DIREC_CIUDAD,
    DIREC_DEPTO = :DIREC_DEPTO,
    CORREO_2 = :CORREO_2,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI,
    ID_USUARIO = :ID_USUARIO
  WHERE
    (ID_EMPLEADO = :ID_EMPLEADO);
END^

SET TERM ; ^

/* Definition for the `SP_EXTERNOS_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EXTERNOS_CREATE(
  ID_EXTERNO INTEGER,
  FECHA_NAC DATE,
  PARENTESCO_AVAL VARCHAR(50),
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUN_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_1 VARCHAR(100),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO EXTERNOS (
    ID_EXTERNO,
    FECHA_NAC,
    PARENTESCO_AVAL,
    NOMBRE_N1,
    NOMBRE_N2,
    NOMBRE_A1,
    NOMBRE_A2,
    DIREC_REFER,
    DIREC_CALLE,
    DIREC_AVE,
    DIREC_NUN_CASA,
    DIREC_CIUDAD,
    DIREC_DEPTO,
    CORREO_1,
    CORREO_2,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :ID_EXTERNO,
    :FECHA_NAC,
    :PARENTESCO_AVAL,
    :NOMBRE_N1,
    :NOMBRE_N2,
    :NOMBRE_A1,
    :NOMBRE_A2,
    :DIREC_REFER,
    :DIREC_CALLE,
    :DIREC_AVE,
    :DIREC_NUN_CASA,
    :DIREC_CIUDAD,
    :DIREC_DEPTO,
    :CORREO_1,
    :CORREO_2,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_EXTERNOS_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EXTERNOS_DELETE(
  ID_EXTERNO INTEGER)
AS
BEGIN
  DELETE FROM EXTERNOS
  WHERE
    (ID_EXTERNO = :ID_EXTERNO);
END^

SET TERM ; ^

/* Definition for the `SP_EXTERNOS_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EXTERNOS_READ
RETURNS(
  ID_EXTERNO INTEGER,
  FECHA_NAC DATE,
  PARENTESCO_AVAL VARCHAR(50),
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUN_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_1 VARCHAR(100),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      ID_EXTERNO,
      FECHA_NAC,
      PARENTESCO_AVAL,
      NOMBRE_N1,
      NOMBRE_N2,
      NOMBRE_A1,
      NOMBRE_A2,
      DIREC_REFER,
      DIREC_CALLE,
      DIREC_AVE,
      DIREC_NUN_CASA,
      DIREC_CIUDAD,
      DIREC_DEPTO,
      CORREO_1,
      CORREO_2,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM EXTERNOS
    INTO
      :ID_EXTERNO,
      :FECHA_NAC,
      :PARENTESCO_AVAL,
      :NOMBRE_N1,
      :NOMBRE_N2,
      :NOMBRE_A1,
      :NOMBRE_A2,
      :DIREC_REFER,
      :DIREC_CALLE,
      :DIREC_AVE,
      :DIREC_NUN_CASA,
      :DIREC_CIUDAD,
      :DIREC_DEPTO,
      :CORREO_1,
      :CORREO_2,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_EXTERNOS_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_EXTERNOS_UPDATE(
  ID_EXTERNO INTEGER,
  FECHA_NAC DATE,
  PARENTESCO_AVAL VARCHAR(50),
  NOMBRE_N1 VARCHAR(50),
  NOMBRE_N2 VARCHAR(50),
  NOMBRE_A1 VARCHAR(50),
  NOMBRE_A2 VARCHAR(50),
  DIREC_REFER VARCHAR(50),
  DIREC_CALLE VARCHAR(50),
  DIREC_AVE VARCHAR(50),
  DIREC_NUN_CASA VARCHAR(50),
  DIREC_CIUDAD VARCHAR(50),
  DIREC_DEPTO VARCHAR(50),
  CORREO_1 VARCHAR(100),
  CORREO_2 VARCHAR(100),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE EXTERNOS
  SET
    FECHA_NAC = :FECHA_NAC,
    PARENTESCO_AVAL = :PARENTESCO_AVAL,
    NOMBRE_N1 = :NOMBRE_N1,
    NOMBRE_N2 = :NOMBRE_N2,
    NOMBRE_A1 = :NOMBRE_A1,
    NOMBRE_A2 = :NOMBRE_A2,
    DIREC_REFER = :DIREC_REFER,
    DIREC_CALLE = :DIREC_CALLE,
    DIREC_AVE = :DIREC_AVE,
    DIREC_NUN_CASA = :DIREC_NUN_CASA,
    DIREC_CIUDAD = :DIREC_CIUDAD,
    DIREC_DEPTO = :DIREC_DEPTO,
    CORREO_1 = :CORREO_1,
    CORREO_2 = :CORREO_2,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (ID_EXTERNO = :ID_EXTERNO);
END^

SET TERM ; ^

/* Definition for the `SP_PAGOS_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PAGOS_CREATE(
  ID_PAGO INTEGER,
  FECHA DATE,
  MONTO FLOAT,
  ID_PRESTAMO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO PAGOS (
    ID_PAGO,
    FECHA,
    MONTO,
    ID_PRESTAMO,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :ID_PAGO,
    :FECHA,
    :MONTO,
    :ID_PRESTAMO,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_PAGOS_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PAGOS_DELETE(
  ID_PAGO INTEGER,
  ID_PRESTAMO INTEGER)
AS
BEGIN
  DELETE FROM PAGOS
  WHERE
    (ID_PAGO = :ID_PAGO) AND 
    (ID_PRESTAMO = :ID_PRESTAMO);
END^

SET TERM ; ^

/* Definition for the `SP_PAGOS_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PAGOS_READ
RETURNS(
  ID_PAGO INTEGER,
  FECHA DATE,
  MONTO FLOAT,
  ID_PRESTAMO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      ID_PAGO,
      FECHA,
      MONTO,
      ID_PRESTAMO,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM PAGOS
    INTO
      :ID_PAGO,
      :FECHA,
      :MONTO,
      :ID_PRESTAMO,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_PAGOS_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PAGOS_UPDATE(
  ID_PAGO INTEGER,
  FECHA DATE,
  MONTO FLOAT,
  ID_PRESTAMO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE PAGOS
  SET
    FECHA = :FECHA,
    MONTO = :MONTO,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (ID_PAGO = :ID_PAGO) AND 
    (ID_PRESTAMO = :ID_PRESTAMO);
END^

SET TERM ; ^

/* Definition for the `SP_PRESTAMOS_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRESTAMOS_CREATE(
  ID_PRESTAMO INTEGER,
  PERIODOS SMALLINT,
  MONTO FLOAT,
  FECHA DATE,
  ID_EMPLE_AVAL INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  SALDO FLOAT,
  ID_EXTERNO INTEGER,
  TASA FLOAT)
AS
BEGIN
  INSERT INTO PRESTAMOS (
    ID_PRESTAMO,
    PERIODOS,
    MONTO,
    FECHA,
    ID_EMPLE_AVAL,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI,
    SALDO,
    ID_EXTERNO,
    TASA)
  VALUES (
    :ID_PRESTAMO,
    :PERIODOS,
    :MONTO,
    :FECHA,
    :ID_EMPLE_AVAL,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI,
    :SALDO,
    :ID_EXTERNO,
    :TASA);
END^

SET TERM ; ^

/* Definition for the `SP_PRESTAMOS_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRESTAMOS_DELETE(
  ID_PRESTAMO INTEGER)
AS
BEGIN
  DELETE FROM PRESTAMOS
  WHERE
    (ID_PRESTAMO = :ID_PRESTAMO);
END^

SET TERM ; ^

/* Definition for the `SP_PRESTAMOS_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRESTAMOS_READ
RETURNS(
  ID_PRESTAMO INTEGER,
  PERIODOS SMALLINT,
  MONTO FLOAT,
  FECHA DATE,
  ID_EMPLE_AVAL INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  SALDO FLOAT,
  ID_EXTERNO INTEGER,
  TASA FLOAT)
AS
BEGIN
  FOR
    SELECT
      ID_PRESTAMO,
      PERIODOS,
      MONTO,
      FECHA,
      ID_EMPLE_AVAL,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI,
      SALDO,
      ID_EXTERNO,
      TASA
    FROM PRESTAMOS
    INTO
      :ID_PRESTAMO,
      :PERIODOS,
      :MONTO,
      :FECHA,
      :ID_EMPLE_AVAL,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI,
      :SALDO,
      :ID_EXTERNO,
      :TASA
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_PRESTAMOS_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRESTAMOS_UPDATE(
  ID_PRESTAMO INTEGER,
  PERIODOS SMALLINT,
  MONTO FLOAT,
  FECHA DATE,
  ID_EMPLE_AVAL INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  SALDO FLOAT,
  ID_EXTERNO INTEGER,
  TASA FLOAT)
AS
BEGIN
  UPDATE PRESTAMOS
  SET
    PERIODOS = :PERIODOS,
    MONTO = :MONTO,
    FECHA = :FECHA,
    ID_EMPLE_AVAL = :ID_EMPLE_AVAL,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI,
    SALDO = :SALDO,
    ID_EXTERNO = :ID_EXTERNO,
    TASA = :TASA
  WHERE
    (ID_PRESTAMO = :ID_PRESTAMO);
END^

SET TERM ; ^

/* Structure for the `PRIVILEGIOS` table :  */

CREATE TABLE PRIVILEGIOS (
  ID_PRIVI INTEGER NOT NULL,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE PRIVILEGIOS ADD PRIMARY KEY (ID_PRIVI);

ALTER TABLE PRIVILEGIOS ADD CONSTRAINT PRIVILEGIOS_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE PRIVILEGIOS ADD CONSTRAINT PRIVILEGIOS_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los privilegios que podran ser asignados a los diferentes roles'
WHERE (RDB$RELATION_NAME = 'PRIVILEGIOS') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `SP_PRIVILEGIOS_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRIVILEGIOS_CREATE(
  ID_PRIVI INTEGER,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO PRIVILEGIOS (
    ID_PRIVI,
    NOMBRE,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :ID_PRIVI,
    :NOMBRE,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_PRIVILEGIOS_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRIVILEGIOS_DELETE(
  ID_PRIVI INTEGER)
AS
BEGIN
  DELETE FROM PRIVILEGIOS
  WHERE
    (ID_PRIVI = :ID_PRIVI);
END^

SET TERM ; ^

/* Definition for the `SP_PRIVILEGIOS_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRIVILEGIOS_READ
RETURNS(
  ID_PRIVI INTEGER,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      ID_PRIVI,
      NOMBRE,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM PRIVILEGIOS
    INTO
      :ID_PRIVI,
      :NOMBRE,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_PRIVILEGIOS_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_PRIVILEGIOS_UPDATE(
  ID_PRIVI INTEGER,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE PRIVILEGIOS
  SET
    NOMBRE = :NOMBRE,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (ID_PRIVI = :ID_PRIVI);
END^

SET TERM ; ^

/* Structure for the `ROLES` table :  */

CREATE TABLE ROLES (
  ID_ROL INTEGER NOT NULL,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE ROLES ADD CONSTRAINT ROLES_PK PRIMARY KEY (ID_ROL);

ALTER TABLE ROLES ADD CONSTRAINT ROLES_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE ROLES ADD CONSTRAINT ROLES_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los roles que podran ser asignados a los usuarios'
WHERE (RDB$RELATION_NAME = 'ROLES') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `SP_ROLES_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROLES_CREATE(
  ID_ROL INTEGER,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO ROLES (
    ID_ROL,
    NOMBRE,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :ID_ROL,
    :NOMBRE,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_ROLES_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROLES_DELETE(
  ID_ROL INTEGER)
AS
BEGIN
  DELETE FROM ROLES
  WHERE
    (ID_ROL = :ID_ROL);
END^

SET TERM ; ^

/* Definition for the `SP_ROLES_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROLES_READ
RETURNS(
  ID_ROL INTEGER,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      ID_ROL,
      NOMBRE,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM ROLES
    INTO
      :ID_ROL,
      :NOMBRE,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_ROLES_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROLES_UPDATE(
  ID_ROL INTEGER,
  NOMBRE VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE ROLES
  SET
    NOMBRE = :NOMBRE,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (ID_ROL = :ID_ROL);
END^

SET TERM ; ^

/* Structure for the `ROL_PRIVILEGIO` table :  */

CREATE TABLE ROL_PRIVILEGIO (
  ID_ROL INTEGER NOT NULL,
  ID_PRIVI INTEGER NOT NULL,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE ROL_PRIVILEGIO ADD CONSTRAINT PK_ROL_PRIVILEGIO PRIMARY KEY (ID_ROL,ID_PRIVI);

ALTER TABLE ROL_PRIVILEGIO ADD CONSTRAINT FK_ROL_PRIVILEGIO FOREIGN KEY (ID_PRIVI) REFERENCES PRIVILEGIOS(ID_PRIVI);

ALTER TABLE ROL_PRIVILEGIO ADD CONSTRAINT ROL_PRIVILEGIO_ROLES_FK FOREIGN KEY (ID_ROL) REFERENCES ROLES(ID_ROL);

ALTER TABLE ROL_PRIVILEGIO ADD CONSTRAINT ROL_PRIVILEGIO_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE ROL_PRIVILEGIO ADD CONSTRAINT ROL_PRIVILEGIO_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para la relacion de roles con privilegio'
WHERE (RDB$RELATION_NAME = 'ROL_PRIVILEGIO') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `SP_ROL_PRIVILEGIO_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_PRIVILEGIO_CREATE(
  ID_ROL INTEGER,
  ID_PRIVI INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO ROL_PRIVILEGIO (
    ID_ROL,
    ID_PRIVI,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :ID_ROL,
    :ID_PRIVI,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_ROL_PRIVILEGIO_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_PRIVILEGIO_DELETE(
  ID_ROL INTEGER,
  ID_PRIVI INTEGER)
AS
BEGIN
  DELETE FROM ROL_PRIVILEGIO
  WHERE
    (ID_ROL = :ID_ROL) AND 
    (ID_PRIVI = :ID_PRIVI);
END^

SET TERM ; ^

/* Definition for the `SP_ROL_PRIVILEGIO_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_PRIVILEGIO_READ
RETURNS(
  ID_ROL INTEGER,
  ID_PRIVI INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      ID_ROL,
      ID_PRIVI,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM ROL_PRIVILEGIO
    INTO
      :ID_ROL,
      :ID_PRIVI,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_ROL_PRIVILEGIO_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_PRIVILEGIO_UPDATE(
  ID_ROL INTEGER,
  ID_PRIVI INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE ROL_PRIVILEGIO
  SET
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (ID_ROL = :ID_ROL) AND 
    (ID_PRIVI = :ID_PRIVI);
END^

SET TERM ; ^

/* Structure for the `ROL_USUARIO` table :  */

CREATE TABLE ROL_USUARIO (
  ID_USUARIO VARCHAR(50) NOT NULL,
  ID_ROL INTEGER NOT NULL,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE ROL_USUARIO ADD CONSTRAINT ROL_USUARIO_PK PRIMARY KEY (ID_ROL,ID_USUARIO);

ALTER TABLE ROL_USUARIO ADD CONSTRAINT ROL_USUARIO_ROLES_FK FOREIGN KEY (ID_ROL) REFERENCES ROLES(ID_ROL);

ALTER TABLE ROL_USUARIO ADD CONSTRAINT ROL_USUARIO_USUARIO_FK FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE ROL_USUARIO ADD CONSTRAINT ROL_USUARIO_USUARIO_FKV1 FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE ROL_USUARIO ADD CONSTRAINT ROL_USUARIO_USUARIO_FKV2 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para relacionar los Roles con los Usuarios'
WHERE (RDB$RELATION_NAME = 'ROL_USUARIO') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `SP_ROL_USUARIO_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_USUARIO_CREATE(
  ID_USUARIO VARCHAR(50),
  ID_ROL INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO ROL_USUARIO (
    ID_USUARIO,
    ID_ROL,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :ID_USUARIO,
    :ID_ROL,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_ROL_USUARIO_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_USUARIO_DELETE(
  ID_USUARIO VARCHAR(50),
  ID_ROL INTEGER)
AS
BEGIN
  DELETE FROM ROL_USUARIO
  WHERE
    (ID_USUARIO = :ID_USUARIO) AND 
    (ID_ROL = :ID_ROL);
END^

SET TERM ; ^

/* Definition for the `SP_ROL_USUARIO_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_USUARIO_READ
RETURNS(
  ID_USUARIO VARCHAR(50),
  ID_ROL INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      ID_USUARIO,
      ID_ROL,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM ROL_USUARIO
    INTO
      :ID_USUARIO,
      :ID_ROL,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_ROL_USUARIO_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_ROL_USUARIO_UPDATE(
  ID_USUARIO VARCHAR(50),
  ID_ROL INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE ROL_USUARIO
  SET
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (ID_USUARIO = :ID_USUARIO) AND 
    (ID_ROL = :ID_ROL);
END^

SET TERM ; ^

/* Structure for the `TELEFONOS_EMP` table :  */

CREATE TABLE TELEFONOS_EMP (
  TELEFONO INTEGER NOT NULL,
  ID_EMPLEADO INTEGER NOT NULL,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE TELEFONOS_EMP ADD CONSTRAINT TELEFONOS_PK PRIMARY KEY (TELEFONO,ID_EMPLEADO);

ALTER TABLE TELEFONOS_EMP ADD CONSTRAINT TELEFONOS_EMP_EMPLEADOS_FK FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADOS(ID_EMPLEADO);

ALTER TABLE TELEFONOS_EMP ADD CONSTRAINT TELEFONOS_EMP_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE TELEFONOS_EMP ADD CONSTRAINT TELEFONOS_EMP_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los telefonos de los empleados'
WHERE (RDB$RELATION_NAME = 'TELEFONOS_EMP') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `SP_TELEFONOS_EMP_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EMP_CREATE(
  TELEFONO INTEGER,
  ID_EMPLEADO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO TELEFONOS_EMP (
    TELEFONO,
    ID_EMPLEADO,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :TELEFONO,
    :ID_EMPLEADO,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_TELEFONOS_EMP_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EMP_DELETE(
  TELEFONO INTEGER,
  ID_EMPLEADO INTEGER)
AS
BEGIN
  DELETE FROM TELEFONOS_EMP
  WHERE
    (TELEFONO = :TELEFONO) AND 
    (ID_EMPLEADO = :ID_EMPLEADO);
END^

SET TERM ; ^

/* Definition for the `SP_TELEFONOS_EMP_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EMP_READ
RETURNS(
  TELEFONO INTEGER,
  ID_EMPLEADO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      TELEFONO,
      ID_EMPLEADO,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM TELEFONOS_EMP
    INTO
      :TELEFONO,
      :ID_EMPLEADO,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_TELEFONOS_EMP_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EMP_UPDATE(
  TELEFONO INTEGER,
  ID_EMPLEADO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE TELEFONOS_EMP
  SET
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (TELEFONO = :TELEFONO) AND 
    (ID_EMPLEADO = :ID_EMPLEADO);
END^

SET TERM ; ^

/* Structure for the `TELEFONOS_EXT` table :  */

CREATE TABLE TELEFONOS_EXT (
  TELEFONO INTEGER NOT NULL,
  ID_EXTERNO INTEGER NOT NULL,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50) NOT NULL,
  USUARIO_MODIFI VARCHAR(50) NOT NULL);


ALTER TABLE TELEFONOS_EXT ADD CONSTRAINT TELEFONOS_EXT_PK PRIMARY KEY (TELEFONO,ID_EXTERNO);

ALTER TABLE TELEFONOS_EXT ADD CONSTRAINT TELEFONOS_EXT_EXTERNOS_FK FOREIGN KEY (ID_EXTERNO) REFERENCES EXTERNOS(ID_EXTERNO);

ALTER TABLE TELEFONOS_EXT ADD CONSTRAINT TELEFONOS_EXT_USUARIO_FK FOREIGN KEY (USUARIO_CREO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE TELEFONOS_EXT ADD CONSTRAINT TELEFONOS_EXT_USUARIO_FKV1 FOREIGN KEY (USUARIO_MODIFI) REFERENCES USUARIO(ID_USUARIO);


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Tabla para guardar los telefonos de las personas externas a la empresa'
WHERE (RDB$RELATION_NAME = 'TELEFONOS_EXT') AND (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `SP_TELEFONOS_EXT_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EXT_CREATE(
  TELEFONO INTEGER,
  ID_EXTERNO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  INSERT INTO TELEFONOS_EXT (
    TELEFONO,
    ID_EXTERNO,
    FECHA_CREADO,
    FECHA_MODIFI,
    USUARIO_CREO,
    USUARIO_MODIFI)
  VALUES (
    :TELEFONO,
    :ID_EXTERNO,
    :FECHA_CREADO,
    :FECHA_MODIFI,
    :USUARIO_CREO,
    :USUARIO_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_TELEFONOS_EXT_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EXT_DELETE(
  TELEFONO INTEGER,
  ID_EXTERNO INTEGER)
AS
BEGIN
  DELETE FROM TELEFONOS_EXT
  WHERE
    (TELEFONO = :TELEFONO) AND 
    (ID_EXTERNO = :ID_EXTERNO);
END^

SET TERM ; ^

/* Definition for the `SP_TELEFONOS_EXT_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EXT_READ
RETURNS(
  TELEFONO INTEGER,
  ID_EXTERNO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  FOR
    SELECT
      TELEFONO,
      ID_EXTERNO,
      FECHA_CREADO,
      FECHA_MODIFI,
      USUARIO_CREO,
      USUARIO_MODIFI
    FROM TELEFONOS_EXT
    INTO
      :TELEFONO,
      :ID_EXTERNO,
      :FECHA_CREADO,
      :FECHA_MODIFI,
      :USUARIO_CREO,
      :USUARIO_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_TELEFONOS_EXT_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_TELEFONOS_EXT_UPDATE(
  TELEFONO INTEGER,
  ID_EXTERNO INTEGER,
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE,
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50))
AS
BEGIN
  UPDATE TELEFONOS_EXT
  SET
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI
  WHERE
    (TELEFONO = :TELEFONO) AND 
    (ID_EXTERNO = :ID_EXTERNO);
END^

SET TERM ; ^

/* Definition for the `SP_USUARIO_CREATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_USUARIO_CREATE(
  ID_USUARIO VARCHAR(50),
  CLAVE VARCHAR(100),
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE)
AS
BEGIN
  INSERT INTO USUARIO (
    ID_USUARIO,
    CLAVE,
    USUARIO_CREO,
    USUARIO_MODIFI,
    FECHA_CREADO,
    FECHA_MODIFI)
  VALUES (
    :ID_USUARIO,
    :CLAVE,
    :USUARIO_CREO,
    :USUARIO_MODIFI,
    :FECHA_CREADO,
    :FECHA_MODIFI);
END^

SET TERM ; ^

/* Definition for the `SP_USUARIO_DELETE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_USUARIO_DELETE(
  ID_USUARIO VARCHAR(50))
AS
BEGIN
  DELETE FROM USUARIO
  WHERE
    (ID_USUARIO = :ID_USUARIO);
END^

SET TERM ; ^

/* Definition for the `SP_USUARIO_READ` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_USUARIO_READ
RETURNS(
  ID_USUARIO VARCHAR(50),
  CLAVE VARCHAR(100),
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE)
AS
BEGIN
  FOR
    SELECT
      ID_USUARIO,
      CLAVE,
      USUARIO_CREO,
      USUARIO_MODIFI,
      FECHA_CREADO,
      FECHA_MODIFI
    FROM USUARIO
    INTO
      :ID_USUARIO,
      :CLAVE,
      :USUARIO_CREO,
      :USUARIO_MODIFI,
      :FECHA_CREADO,
      :FECHA_MODIFI
  DO
    BEGIN
      SUSPEND;
    END
END^

SET TERM ; ^

/* Definition for the `SP_USUARIO_UPDATE` procedure :  */

SET TERM ^ ;

CREATE PROCEDURE SP_USUARIO_UPDATE(
  ID_USUARIO VARCHAR(50),
  CLAVE VARCHAR(100),
  USUARIO_CREO VARCHAR(50),
  USUARIO_MODIFI VARCHAR(50),
  FECHA_CREADO DATE,
  FECHA_MODIFI DATE)
AS
BEGIN
  UPDATE USUARIO
  SET
    CLAVE = :CLAVE,
    USUARIO_CREO = :USUARIO_CREO,
    USUARIO_MODIFI = :USUARIO_MODIFI,
    FECHA_CREADO = :FECHA_CREADO,
    FECHA_MODIFI = :FECHA_MODIFI
  WHERE
    (ID_USUARIO = :ID_USUARIO);
END^

SET TERM ; ^

/* Definition for the `EX_DATA_ERROR` exception :  */

CREATE EXCEPTION EX_DATA_ERROR '';


UPDATE RDB$EXCEPTIONS SET
RDB$DESCRIPTION = 'Excepcion para usarla e las validaciones de los triggers'
WHERE RDB$EXCEPTION_NAME = 'EX_DATA_ERROR';

/* Definition for the `TR_ABONOS_BIU` trigger :  
   Trigger before insert y update para validaciones de abonos */

SET TERM ^ ;

CREATE TRIGGER TR_ABONOS_BIU FOR ABONOS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
DECLARE VARIABLE NEXT_NUM_FOR INTEGER;
DECLARE VARIABLE TIPO_CUENTA VARCHAR(50);
DECLARE VARIABLE POR_DEDUCCION CHAR(20);
DECLARE VARIABLE INVERSION FLOAT;
DECLARE VARIABLE INVERSION_MES FLOAT;
DECLARE VARIABLE POR_DEDUCCIONES CHAR(20);
DECLARE VARIABLE CANT_AOBONOS INTEGER;
DECLARE VARIABLE SUMA_AOBONOS FLOAT;
BEGIN
  SELECT P_NEXT FROM FN_GET_NEXT_FOR(NEW.ID_CUENTA,'C') INTO :NEXT_NUM_FOR;
  SELECT * FROM FN_GET_DATA_FOR_VALIDATE_ABONO(NEW.ID_CUENTA) 
  INTO :TIPO_CUENTA, :INVERSION, :INVERSION_MES, :POR_DEDUCCION, :CANT_AOBONOS, :SUMA_AOBONOS;

  IF(INSERTING) THEN BEGIN
      IF (NEW.ID_ABONO IS NULL) THEN
          NEW.ID_ABONO = :NEXT_NUM_FOR;
      
	  NEW.USUARIO_CREO = CURRENT_USER;
      NEW.FECHA_CREADO = CURRENT_DATE;
      
      NEW.CODIGO_ABONO = EXTRACT(YEAR FROM NEW.FECHA_CREADO) || '-' || EXTRACT(MONTH FROM NEW.FECHA_CREADO) || '-' || :NEXT_NUM_FOR;
      
      IF(:TIPO_CUENTA = 'AHORRO') THEN BEGIN
      	IF(NEW.MONTO < 150) THEN
        	EXCEPTION ex_data_error 'Monto de abono minimo Lps. 150.00';
      END
        
      ELSE IF(:TIPO_CUENTA = 'INVERSION') THEN BEGIN
      	IF(:POR_DEDUCCION = 'SI') THEN BEGIN
          IF(NEW.MONTO < :INVERSION_MES) THEN
          	EXCEPTION ex_data_error 'Monto de abono minimo mensual es Lps. ' || :INVERSION_MES;
        END
        ELSE IF(:POR_DEDUCCION = 'NO') THEN BEGIN
          IF(:CANT_AOBONOS > 0) THEN
          	EXCEPTION ex_data_error 'Solo puede hacer un abono al anual';
          ELSE IF(NEW.MONTO < :INVERSION) THEN
            EXCEPTION ex_data_error 'Monto de abono minimo Lps. ' || :INVERSION;
        END
      END
  END
      
  IF ( UPDATING ) THEN BEGIN
  	  NEW.USUARIO_MODIFI = CURRENT_USER;
      NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de abonos'
WHERE (RDB$RELATION_NAME = 'ABONOS') AND (RDB$TRIGGER_NAME = 'TR_ABONOS_BIU');

/* Definition for the `CUENTAS_ID_CUENTA_GEN` generator :  */

CREATE GENERATOR CUENTAS_ID_CUENTA_GEN;

SET GENERATOR CUENTAS_ID_CUENTA_GEN TO 1;

/* Definition for the `TR_CUENTAS_BIU` trigger :  
   Trigger before insert y update para validaciones de cuentas*/

SET TERM ^ ;

CREATE TRIGGER TR_CUENTAS_BIU FOR CUENTAS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
DECLARE VARIABLE NUM_CUENTAS INTEGER;
BEGIN
  SELECT
  	NEW_VALUE
  FROM 
  	FN_GET_CUENATS_BY_TIPO(NEW.ID_EMPLEADO,NEW.TIPO)
  INTO
  	:NUM_CUENTAS;
  
  IF (INSERTING) THEN BEGIN
      IF (NEW.ID_CUENTA IS NULL) THEN
	      NEW.ID_CUENTA = GEN_ID(CUENTAS_ID_CUENTA_GEN, 1);
      
      NEW.USUARIO_CREO = CURRENT_USER;
      NEW.FECHA_CREADO = CURRENT_DATE;
      
      IF(NEW.TIPO = 'AHORRO') THEN BEGIN
      	IF(NEW.SALDO < 150 ) THEN
        	EXCEPTION ex_data_error 'Saldo de inicio de cuenta minimo es 150';
      END
	  ELSE IF(NEW.TIPO = 'INVERSION') THEN BEGIN
      	IF(NEW.SALDO < 1000) THEN
        	EXCEPTION ex_data_error 'Saldo de inicio de cuenta minimo es 1000';
        IF(NEW.INVERSION < 1000) THEN
        	EXCEPTION ex_data_error 'Inversion anual de cuenta minimo es 1000';
        IF(NEW.POR_DEDUCCION = 'SI') THEN
        	NEW.INVERSION_MES = NEW.INVERSION/5;
      END
      ELSE
      	EXCEPTION ex_data_error 'Tipo de cuenta no valido (AHORRO / INVERSION)';
        
      IF(EXTRACT(MONTH FROM NEW.FECHA_CREADO) > 2 ) THEN
		EXCEPTION ex_data_error 'Solo puede crear fechas en los meses de (Enero o Febrero)';
        
      IF(NUM_CUENTAS > 0) THEN
      	EXCEPTION ex_data_error 'Solo se puede tener una cuenta por cada tipo';
  END
      
  IF ( UPDATING ) THEN BEGIN
  	  NEW.USUARIO_MODIFI = CURRENT_USER;
      NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de cuentas'
WHERE (RDB$RELATION_NAME = 'CUENTAS') AND (RDB$TRIGGER_NAME = 'TR_CUENTAS_BIU');

/* Definition for the `TR_EMPLEADOS_BIU` trigger :  
   Trigger before insert y update para validaciones de empleados*/

SET TERM ^ ;

CREATE TRIGGER TR_EMPLEADOS_BIU FOR EMPLEADOS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
BEGIN
  IF (INSERTING) THEN BEGIN
      IF (NEW.ID_EMPLEADO IS NULL) THEN
	      NEW.ID_EMPLEADO = GEN_ID(ID_EMPLEADO_GEN, 1);
      
      NEW.USUARIO_CREO = CURRENT_USER;
      NEW.FECHA_CREADO = CURRENT_DATE;
  END
      
  IF ( UPDATING ) THEN BEGIN
  	  NEW.USUARIO_MODIFI = CURRENT_USER;
      NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de empleados'
WHERE (RDB$RELATION_NAME = 'EMPLEADOS') AND (RDB$TRIGGER_NAME = 'TR_EMPLEADOS_BIU');

/* Definition for the `EXTERNOS_ID_EXTERNO_GEN` generator :  */

CREATE GENERATOR EXTERNOS_ID_EXTERNO_GEN;

/* Definition for the `TR_EXTERNOS_BIU` trigger :  
   Trigger before insert y update para validaciones de externos*/

SET TERM ^ ;

CREATE TRIGGER TR_EXTERNOS_BIU FOR EXTERNOS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
BEGIN      
  IF (INSERTING) THEN BEGIN
      IF (NEW.ID_EXTERNO IS NULL) THEN
	      NEW.ID_EXTERNO = GEN_ID(EXTERNOS_ID_EXTERNO_GEN, 1);
  
      NEW.USUARIO_CREO = CURRENT_USER;
      NEW.FECHA_CREADO = CURRENT_DATE;
  END
      
  IF ( UPDATING ) THEN BEGIN
  	  NEW.USUARIO_MODIFI = CURRENT_USER;
      NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de externos'
WHERE (RDB$RELATION_NAME = 'EXTERNOS') AND (RDB$TRIGGER_NAME = 'TR_EXTERNOS_BIU');

/* Definition for the `TR_PAGOS_BIU` trigger :  
   Trigger before insert y update para validaciones de pagos*/

SET TERM ^ ;

CREATE TRIGGER TR_PAGOS_BIU FOR PAGOS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 1
AS
DECLARE VARIABLE NEXT_NUM_FOR INTEGER;
DECLARE VARIABLE CUOTA_PER_MES FLOAT;
BEGIN
  SELECT P_NEXT FROM FN_GET_NEXT_FOR(NEW.ID_PRESTAMO,'P') INTO :NEXT_NUM_FOR;
  SELECT CUOTA_PER_MES FROM PRESTAMOS P WHERE P.ID_PRESTAMO = NEW.ID_PRESTAMO INTO :CUOTA_PER_MES;

  IF(INSERTING) THEN BEGIN
    IF (NEW.ID_PAGO IS NULL) THEN
        NEW.ID_PAGO = :NEXT_NUM_FOR;
        
    IF(NEW.MONTO != :CUOTA_PER_MES) THEN
    	EXCEPTION EX_DATA_ERROR 'Su cuota mensual es de: ' || :CUOTA_PER_MES;
        
    NEW.USUARIO_CREO = CURRENT_USER;
    NEW.FECHA_CREADO = CURRENT_DATE;
  END
  
  IF(UPDATING) THEN BEGIN
  	NEW.USUARIO_MODIFI = CURRENT_USER;
    NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de pagos'
WHERE (RDB$RELATION_NAME = 'PAGOS') AND (RDB$TRIGGER_NAME = 'TR_PAGOS_BIU');

/* Definition for the `PMT` procedure :  
   Funcion financiera de excel para calcular la cuota de un prestamo incluido su interes*/

SET TERM ^ ;

CREATE PROCEDURE PMT(
  P_VP DOUBLE PRECISION,
  P_I DOUBLE PRECISION,
  P_N DOUBLE PRECISION)
RETURNS(
  RESULT DOUBLE PRECISION)
AS
BEGIN
   RESULT = P_I / (Power(1.0 + P_I, P_N) - 1.0) * -(P_VP * Power(1.0 + P_I, P_N)) * -1;
   suspend;
END^

SET TERM ; ^


UPDATE RDB$PROCEDURES SET
RDB$DESCRIPTION = 'Calcula el valor del pago del prestamo en un financiamiento uniforme'
WHERE RDB$PROCEDURE_NAME = 'PMT';

/* Definition for the `TR_PRESTAMOS_BIU` trigger :  
   Trigger before insert y update para validaciones de prestamos */

SET TERM ^ ;

CREATE TRIGGER TR_PRESTAMOS_BIU FOR PRESTAMOS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 1
AS
DECLARE VARIABLE MAX_MONTO FLOAT;
DECLARE VARIABLE TASA FLOAT;
DECLARE VARIABLE WHOIS VARCHAR(3);
DECLARE VARIABLE ABONOS_ACTIVOS INTEGER;
BEGIN
  IF(NEW.ID_EXTERNO IS NULL) THEN BEGIN
  	WHOIS = 'EMP';
    SELECT P_ACTIVOS 
    FROM FN_GET_PRESTAMOS_ACTIVOS(NEW.ID_EMPLE_AVAL,:WHOIS) 
    INTO :ABONOS_ACTIVOS;
  END
  ELSE BEGIN
  	WHOIS = 'EXT';
    SELECT P_ACTIVOS 
    FROM FN_GET_PRESTAMOS_ACTIVOS(NEW.ID_EXTERNO,:WHOIS) 
    INTO :ABONOS_ACTIVOS;
  END

  SELECT P_MAX_MONTO, P_TASA 
  FROM FN_GET_MAX_MONTO_FOR_PRESTAMO(NEW.ID_EMPLE_AVAL,:WHOIS) 
  INTO :MAX_MONTO, :TASA;

  IF(:ABONOS_ACTIVOS > 0) THEN
  	EXCEPTION ex_data_error 'Ya tiene un prestamo activo';

  IF(INSERTING) THEN BEGIN
  	IF(NEW.PERIODOS > 12 ) THEN
       	EXCEPTION ex_data_error 'Maximo de cuotas 12';
        
    IF(NEW.MONTO > :MAX_MONTO) THEN
    	EXCEPTION ex_data_error 'Su monto maximo es: ' || :MAX_MONTO;
        
    SELECT
  		RESULT
    FROM
    	PMT(NEW.MONTO,:TASA,NEW.PERIODOS)
    INTO
    	NEW.CUOTA_PER_MES;
        
    NEW.SALDO = NEW.CUOTA_PER_MES*NEW.PERIODOS;
    NEW.TASA = :TASA;
        
    NEW.USUARIO_CREO = CURRENT_USER;
    NEW.FECHA_CREADO = CURRENT_DATE;
  END
    
  IF(UPDATING) THEN BEGIN
  	NEW.USUARIO_MODIFI = CURRENT_USER;
    NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de prestamos'
WHERE (RDB$RELATION_NAME = 'PRESTAMOS') AND (RDB$TRIGGER_NAME = 'TR_PRESTAMOS_BIU');

/* Definition for the `PRIVILEGIOS_ID_PRIVI_GEN` generator :  */

CREATE GENERATOR PRIVILEGIOS_ID_PRIVI_GEN;

SET GENERATOR PRIVILEGIOS_ID_PRIVI_GEN TO 1;

/* Definition for the `TR_PRIVILEGIOS_BIU` trigger :  
   Trigger before insert y update para validaciones de privilegios*/

SET TERM ^ ;

CREATE TRIGGER TR_PRIVILEGIOS_BIU FOR PRIVILEGIOS
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
BEGIN
  IF (INSERTING) THEN BEGIN
      IF (NEW.ID_PRIVI IS NULL) THEN
	      NEW.ID_PRIVI = GEN_ID(PRIVILEGIOS_ID_PRIVI_GEN, 1);
          
      NEW.USUARIO_CREO = CURRENT_USER;
      NEW.FECHA_CREADO = CURRENT_DATE;
  END
      
  IF ( UPDATING ) THEN BEGIN
  	  NEW.USUARIO_MODIFI = CURRENT_USER;
      NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de privilegios'
WHERE (RDB$RELATION_NAME = 'PRIVILEGIOS') AND (RDB$TRIGGER_NAME = 'TR_PRIVILEGIOS_BIU');

/* Definition for the `ROLES_ID_ROL_GEN` generator :  */

CREATE GENERATOR ROLES_ID_ROL_GEN;

SET GENERATOR ROLES_ID_ROL_GEN TO 1;

/* Definition for the `TR_ROLES_BIU` trigger :  
   Trigger before insert y update para validaciones de roles*/

SET TERM ^ ;

CREATE TRIGGER TR_ROLES_BIU FOR ROLES
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
BEGIN
  IF (INSERTING) THEN BEGIN
	  IF (NEW.ID_ROL IS NULL) THEN
	      NEW.ID_ROL = GEN_ID(ROLES_ID_ROL_GEN, 1);
          
      NEW.USUARIO_CREO = CURRENT_USER;
      NEW.FECHA_CREADO = CURRENT_DATE;
  END
      
  IF ( UPDATING ) THEN BEGIN
  	  NEW.USUARIO_MODIFI = CURRENT_USER;
      NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de roles'
WHERE (RDB$RELATION_NAME = 'ROLES') AND (RDB$TRIGGER_NAME = 'TR_ROLES_BIU');

/* Definition for the `TR_ROL_PRIVILEGIO_BIU` trigger :  
   Trigger before insert y update para validaciones de rol_privilegio*/

SET TERM ^ ;

CREATE TRIGGER TR_ROL_PRIVILEGIO_BIU FOR ROL_PRIVILEGIO
ACTIVE BEFORE INSERT OR UPDATE
POSITION 0
AS
BEGIN
  IF(INSERTING) THEN BEGIN
  	NEW.USUARIO_CREO = CURRENT_USER;
    NEW.FECHA_CREADO = CURRENT_DATE;
  END
  
  IF(UPDATING) THEN BEGIN
  	NEW.USUARIO_MODIFI = CURRENT_USER;
    NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de rol_privilegio'
WHERE (RDB$RELATION_NAME = 'ROL_PRIVILEGIO') AND (RDB$TRIGGER_NAME = 'TR_ROL_PRIVILEGIO_BIU');

/* Definition for the `TR_ROL_USUARIO_BIU` trigger :  
   Trigger before insert y update para validaciones de rol_usuario*/

SET TERM ^ ;

CREATE TRIGGER TR_ROL_USUARIO_BIU FOR ROL_USUARIO
ACTIVE BEFORE INSERT OR UPDATE
POSITION 1
AS
BEGIN
  IF(INSERTING) THEN BEGIN
  	NEW.USUARIO_CREO = CURRENT_USER;
    NEW.FECHA_CREADO = CURRENT_DATE;
  END
    
  IF(UPDATING) THEN BEGIN
  	NEW.USUARIO_MODIFI = CURRENT_USER;
    NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de rol_usuario'
WHERE (RDB$RELATION_NAME = 'ROL_USUARIO') AND (RDB$TRIGGER_NAME = 'TR_ROL_USUARIO_BIU');

/* Definition for the `TR_TELEFONOS_EMP_BIU` trigger :  
   Trigger before insert y update para validaciones de telefonos de los empleados*/

SET TERM ^ ;

CREATE TRIGGER TR_TELEFONOS_EMP_BIU FOR TELEFONOS_EMP
ACTIVE BEFORE INSERT OR UPDATE
POSITION 1
AS
BEGIN
  IF(INSERTING) THEN BEGIN
  	NEW.USUARIO_CREO = CURRENT_USER;
    NEW.FECHA_CREADO = CURRENT_DATE;
  END
    
  IF(UPDATING) THEN BEGIN
  	NEW.USUARIO_MODIFI = CURRENT_USER;
    NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de telefonos de los empleados'
WHERE (RDB$RELATION_NAME = 'TELEFONOS_EMP') AND (RDB$TRIGGER_NAME = 'TR_TELEFONOS_EMP_BIU');

/* Definition for the `TR_TELEFONOS_EXT_BIU` trigger :  
   Trigger before insert y update para validaciones de telefonos de los externos*/

SET TERM ^ ;

CREATE TRIGGER TR_TELEFONOS_EXT_BIU FOR TELEFONOS_EXT
ACTIVE BEFORE INSERT OR UPDATE
POSITION 1
AS
BEGIN
  IF(INSERTING) THEN BEGIN
  	NEW.USUARIO_CREO = CURRENT_USER;
    NEW.FECHA_CREADO = CURRENT_DATE;
  END
    
  IF(UPDATING) THEN BEGIN
  	NEW.USUARIO_MODIFI = CURRENT_USER;
    NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de telefonos de las personas externas'
WHERE (RDB$RELATION_NAME = 'TELEFONOS_EXT') AND (RDB$TRIGGER_NAME = 'TR_TELEFONOS_EXT_BIU');

/* Definition for the `TR_USUARIO_BIU` trigger :  
   Trigger before insert y update para validaciones de usuarios*/

SET TERM ^ ;

CREATE TRIGGER TR_USUARIO_BIU FOR USUARIO
ACTIVE BEFORE INSERT OR UPDATE
POSITION 1
AS
BEGIN
  IF(INSERTING) THEN BEGIN
  	NEW.USUARIO_CREO = CURRENT_USER;
    NEW.FECHA_CREADO = CURRENT_DATE;
  END
    
  IF(UPDATING) THEN BEGIN
  	NEW.USUARIO_MODIFI = CURRENT_USER;
    NEW.FECHA_MODIFI = CURRENT_DATE;
  END
END^

SET TERM ; ^


UPDATE RDB$TRIGGERS SET
RDB$DESCRIPTION = 'Trigger para validaciones before insert or update de usuarios'
WHERE (RDB$RELATION_NAME = 'USUARIO') AND (RDB$TRIGGER_NAME = 'TR_USUARIO_BIU');

/* Definition for the `V_CIERRE_ANUAL` view :  
   Vista de la tabla del cierre anual*/

CREATE VIEW V_CIERRE_ANUAL(
  NOMBRE,
  INVERSION_TOTAL,
  PORCENTAJE,
  GANANCIA)
AS
SELECT 
  	NOMBRE,
    INVERSION_TOTAL,
    PORCENTAJE,
    GANANCIA
  FROM FN_GET_INVERSION_TOTAL_GANANCIA;


UPDATE RDB$RELATIONS SET
RDB$DESCRIPTION = 'Vista para mostrar la tabla del cierre anual'
WHERE (RDB$RELATION_NAME = 'V_CIERRE_ANUAL') AND NOT (RDB$VIEW_SOURCE IS NULL);

/* Definition for the `ABONOS_ID_ABONO_GEN` generator :  */

CREATE GENERATOR ABONOS_ID_ABONO_GEN;

SET GENERATOR ABONOS_ID_ABONO_GEN TO 1;

/* Privileges for the `ABONOS` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ABONOS TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `CUENTAS` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON CUENTAS TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `EMPLEADOS` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON EMPLEADOS TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `EXTERNOS` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON EXTERNOS TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `PAGOS` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON PAGOS TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `PRESTAMOS` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON PRESTAMOS TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `PRIVILEGIOS` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON PRIVILEGIOS TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `ROL_PRIVILEGIO` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ROL_PRIVILEGIO TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `ROL_USUARIO` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ROL_USUARIO TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `ROLES` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON ROLES TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `TELEFONOS_EMP` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON TELEFONOS_EMP TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `TELEFONOS_EXT` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON TELEFONOS_EXT TO SYSDBA WITH GRANT OPTION;


/* Privileges for the `USUARIO` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON USUARIO TO SYSDBA WITH GRANT OPTION;

/* Privileges for the `V_CIERRE_ANUAL` :  */


GRANT SELECT, INSERT, DELETE, REFERENCES, UPDATE ON V_CIERRE_ANUAL TO SYSDBA WITH GRANT OPTION;

/* Privileges for the `EMPLEADOS_ID_EMPLEADO_AUTOINC` :  */


GRANT EXECUTE ON PROCEDURE EMPLEADOS_ID_EMPLEADO_AUTOINC TO SYSDBA;


/* Privileges for the `FN_CIERRE_ANUAL` :  */


GRANT EXECUTE ON PROCEDURE FN_CIERRE_ANUAL TO SYSDBA;


/* Privileges for the `FN_CIERRE_MENSUAL` :  */


GRANT EXECUTE ON PROCEDURE FN_CIERRE_MENSUAL TO SYSDBA;


/* Privileges for the `FN_GET_CUENATS_BY_TIPO` :  */


GRANT EXECUTE ON PROCEDURE FN_GET_CUENATS_BY_TIPO TO SYSDBA;


/* Privileges for the `FN_GET_DATA_FOR_VALIDATE_ABONO` :  */


GRANT EXECUTE ON PROCEDURE FN_GET_DATA_FOR_VALIDATE_ABONO TO SYSDBA;


/* Privileges for the `FN_GET_GANANCIA_ANUAL` :  */


GRANT EXECUTE ON PROCEDURE FN_GET_GANANCIA_ANUAL TO SYSDBA;


/* Privileges for the `FN_GET_INVERSION_TOTAL_GANANCIA` :  */


GRANT EXECUTE ON PROCEDURE FN_GET_INVERSION_TOTAL_GANANCIA TO SYSDBA;


/* Privileges for the `FN_GET_MAX_MONTO_FOR_PRESTAMO` :  */


GRANT EXECUTE ON PROCEDURE FN_GET_MAX_MONTO_FOR_PRESTAMO TO SYSDBA;


/* Privileges for the `FN_GET_NEXT_FOR` :  */


GRANT EXECUTE ON PROCEDURE FN_GET_NEXT_FOR TO SYSDBA;


/* Privileges for the `FN_GET_PRESTAMOS_ACTIVOS` :  */


GRANT EXECUTE ON PROCEDURE FN_GET_PRESTAMOS_ACTIVOS TO SYSDBA;


/* Privileges for the `PMT` :  */


GRANT EXECUTE ON PROCEDURE PMT TO SYSDBA;


/* Privileges for the `SP_ABONOS_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ABONOS_CREATE TO SYSDBA;


/* Privileges for the `SP_ABONOS_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_ABONOS_DELETE TO SYSDBA;


/* Privileges for the `SP_ABONOS_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_ABONOS_READ TO SYSDBA;


/* Privileges for the `SP_ABONOS_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ABONOS_UPDATE TO SYSDBA;


/* Privileges for the `SP_CUENTAS_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_CUENTAS_CREATE TO SYSDBA;


/* Privileges for the `SP_CUENTAS_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_CUENTAS_DELETE TO SYSDBA;


/* Privileges for the `SP_CUENTAS_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_CUENTAS_READ TO SYSDBA;


/* Privileges for the `SP_CUENTAS_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_CUENTAS_UPDATE TO SYSDBA;


/* Privileges for the `SP_EMPLEADOS_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_EMPLEADOS_CREATE TO SYSDBA;


/* Privileges for the `SP_EMPLEADOS_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_EMPLEADOS_DELETE TO SYSDBA;


/* Privileges for the `SP_EMPLEADOS_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_EMPLEADOS_READ TO SYSDBA;


/* Privileges for the `SP_EMPLEADOS_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_EMPLEADOS_UPDATE TO SYSDBA;


/* Privileges for the `SP_EXTERNOS_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_EXTERNOS_CREATE TO SYSDBA;


/* Privileges for the `SP_EXTERNOS_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_EXTERNOS_DELETE TO SYSDBA;


/* Privileges for the `SP_EXTERNOS_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_EXTERNOS_READ TO SYSDBA;


/* Privileges for the `SP_EXTERNOS_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_EXTERNOS_UPDATE TO SYSDBA;


/* Privileges for the `SP_PAGOS_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_PAGOS_CREATE TO SYSDBA;


/* Privileges for the `SP_PAGOS_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_PAGOS_DELETE TO SYSDBA;


/* Privileges for the `SP_PAGOS_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_PAGOS_READ TO SYSDBA;


/* Privileges for the `SP_PAGOS_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_PAGOS_UPDATE TO SYSDBA;


/* Privileges for the `SP_PRESTAMOS_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_PRESTAMOS_CREATE TO SYSDBA;


/* Privileges for the `SP_PRESTAMOS_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_PRESTAMOS_DELETE TO SYSDBA;


/* Privileges for the `SP_PRESTAMOS_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_PRESTAMOS_READ TO SYSDBA;


/* Privileges for the `SP_PRESTAMOS_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_PRESTAMOS_UPDATE TO SYSDBA;


/* Privileges for the `SP_PRIVILEGIOS_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_PRIVILEGIOS_CREATE TO SYSDBA;


/* Privileges for the `SP_PRIVILEGIOS_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_PRIVILEGIOS_DELETE TO SYSDBA;


/* Privileges for the `SP_PRIVILEGIOS_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_PRIVILEGIOS_READ TO SYSDBA;


/* Privileges for the `SP_PRIVILEGIOS_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_PRIVILEGIOS_UPDATE TO SYSDBA;


/* Privileges for the `SP_ROL_PRIVILEGIO_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_PRIVILEGIO_CREATE TO SYSDBA;


/* Privileges for the `SP_ROL_PRIVILEGIO_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_PRIVILEGIO_DELETE TO SYSDBA;


/* Privileges for the `SP_ROL_PRIVILEGIO_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_PRIVILEGIO_READ TO SYSDBA;


/* Privileges for the `SP_ROL_PRIVILEGIO_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_PRIVILEGIO_UPDATE TO SYSDBA;


/* Privileges for the `SP_ROL_USUARIO_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_USUARIO_CREATE TO SYSDBA;


/* Privileges for the `SP_ROL_USUARIO_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_USUARIO_DELETE TO SYSDBA;


/* Privileges for the `SP_ROL_USUARIO_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_USUARIO_READ TO SYSDBA;


/* Privileges for the `SP_ROL_USUARIO_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROL_USUARIO_UPDATE TO SYSDBA;


/* Privileges for the `SP_ROLES_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROLES_CREATE TO SYSDBA;


/* Privileges for the `SP_ROLES_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROLES_DELETE TO SYSDBA;


/* Privileges for the `SP_ROLES_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_ROLES_READ TO SYSDBA;


/* Privileges for the `SP_ROLES_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_ROLES_UPDATE TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EMP_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EMP_CREATE TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EMP_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EMP_DELETE TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EMP_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EMP_READ TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EMP_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EMP_UPDATE TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EXT_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EXT_CREATE TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EXT_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EXT_DELETE TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EXT_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EXT_READ TO SYSDBA;


/* Privileges for the `SP_TELEFONOS_EXT_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_TELEFONOS_EXT_UPDATE TO SYSDBA;


/* Privileges for the `SP_USUARIO_CREATE` :  */


GRANT EXECUTE ON PROCEDURE SP_USUARIO_CREATE TO SYSDBA;


/* Privileges for the `SP_USUARIO_DELETE` :  */


GRANT EXECUTE ON PROCEDURE SP_USUARIO_DELETE TO SYSDBA;


/* Privileges for the `SP_USUARIO_READ` :  */


GRANT EXECUTE ON PROCEDURE SP_USUARIO_READ TO SYSDBA;


/* Privileges for the `SP_USUARIO_UPDATE` :  */


GRANT EXECUTE ON PROCEDURE SP_USUARIO_UPDATE TO SYSDBA;

